/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.81
 * Generated at: 2017-12-03 05:36:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import Filmbooking.*;
import java.util.*;
import java.text.*;

public final class control_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      Filmbooking.filmBean film_list = null;
      synchronized (application) {
        film_list = (Filmbooking.filmBean) _jspx_page_context.getAttribute("film_list", javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        if (film_list == null){
          film_list = new Filmbooking.filmBean();
          _jspx_page_context.setAttribute("film_list", film_list, javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        }
      }
      out.write('\r');
      out.write('\n');
      Filmbooking.film movie = null;
      movie = (Filmbooking.film) _jspx_page_context.getAttribute("movie", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (movie == null){
        movie = new Filmbooking.film();
        _jspx_page_context.setAttribute("movie", movie, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      Filmbooking.seat chair = null;
      chair = (Filmbooking.seat) _jspx_page_context.getAttribute("chair", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (chair == null){
        chair = new Filmbooking.seat();
        _jspx_page_context.setAttribute("chair", chair, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      Filmbooking.resv book = null;
      book = (Filmbooking.resv) _jspx_page_context.getAttribute("book", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (book == null){
        book = new Filmbooking.resv();
        _jspx_page_context.setAttribute("book", book, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("\r\n");
      Filmbooking.seatBean seat_list = null;
      synchronized (application) {
        seat_list = (Filmbooking.seatBean) _jspx_page_context.getAttribute("seat_list", javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        if (seat_list == null){
          seat_list = new Filmbooking.seatBean();
          _jspx_page_context.setAttribute("seat_list", seat_list, javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        }
      }
      out.write('\r');
      out.write('\n');
      Filmbooking.member person = null;
      synchronized (session) {
        person = (Filmbooking.member) _jspx_page_context.getAttribute("person", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (person == null){
          person = new Filmbooking.member();
          _jspx_page_context.setAttribute("person", person, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write('\r');
      out.write('\n');
      Filmbooking.memberBean member_list = null;
      synchronized (application) {
        member_list = (Filmbooking.memberBean) _jspx_page_context.getAttribute("member_list", javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        if (member_list == null){
          member_list = new Filmbooking.memberBean();
          _jspx_page_context.setAttribute("member_list", member_list, javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        }
      }
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("member_list"), request);
      out.write('\r');
      out.write('\n');
      Filmbooking.resvBean resv_list = null;
      synchronized (application) {
        resv_list = (Filmbooking.resvBean) _jspx_page_context.getAttribute("resv_list", javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        if (resv_list == null){
          resv_list = new Filmbooking.resvBean();
          _jspx_page_context.setAttribute("resv_list", resv_list, javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        }
      }
      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("resv_list"), request);
      out.write('\r');
      out.write('\n');

	request.setCharacterEncoding("utf-8");

	String action = request.getParameter("action");
	//액션 구분	
	if (action.equals("film") && action != null) {
		String oper = request.getParameter("film");
		if (oper.equals("insert")) {//영화 추가
			movie.setFilm_name(request.getParameter("film_name"));
			movie.setAge_phase(Integer.parseInt(request.getParameter("age_phase")));
			movie.setDate(request.getParameter("date"));
			movie.setSeat_num(Integer.parseInt(request.getParameter("seat_num")));
			film_list.insertDB(movie);
			chair.setId_film(film_list.getFilm(request.getParameter("film_name")).getId_film());
			for (int i = movie.getSeat_num(); i < 9; i++) {
				chair.setSeat(i, true);
			}
			seat_list.insertDB(chair);
			response.sendRedirect("af_list.jsp");
		} else if (oper.equals("remove")) {//영화 제거
			film_list.deleteDB(Integer.parseInt(request.getParameter("rm_Id")));
			seat_list
					.deleteDB(seat_list.getChair(Integer.parseInt(request.getParameter("rm_Id"))).getId_seat());
			resv_list.deleteMovie(Integer.parseInt(request.getParameter("rm_Id")));
			response.sendRedirect("af_list.jsp");
		}
	} else if (action.equals("member") && action != null) {

		String oper = request.getParameter("member");
		if (oper.equals("main")) {//메인화면에서 영화 선택
			session.setAttribute("select", request.getParameter("select"));

			if (person.getName_mem() == null) {

      out.write('\r');
      out.write('\n');
      if (true) {
        _jspx_page_context.forward("login.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

	} else {

      out.write('\r');
      out.write('\n');
      if (true) {
        _jspx_page_context.forward("seat.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

	}
		} else if (oper.equals("regist")) {//회원 가입
			if (request.getParameter("name_mem").equals("") || request.getParameter("password1").equals("")
					|| request.getParameter("password2").equals("")
					|| request.getParameter("age_mem").equals("")) {
				out.println("<script type='text/javascript'>alert('모든 값을 입력해주세요');history.back();</script>");
				return;
			}
			for (member tem : member_list.getDBList()) {
				if (request.getParameter("name_mem").equals(tem.getName_mem())) {
					out.println(
							"<script type='text/javascript'>alert('존재하는 아이디 입니다');history.back();</script>");
					return;
				}
			}
			if (!request.getParameter("password1").equals(request.getParameter("password2"))) {
				out.println("<script type='text/javascript'>alert('비밀번호 불일치');history.back();</script>");
				return;
			} else {
				person.setName_mem(request.getParameter("name_mem"));
				person.setPassword(request.getParameter("password1"));
				person.setAge_mem(Integer.parseInt(request.getParameter("age_mem")));
				java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat("yyyy.MM");
				String today = formatter.format(new java.util.Date());
				person.setRegister_date(today);
				member_list.insertDB(person);
				session.setAttribute("person", member_list.getPerson(request.getParameter("name_mem")));
				if (session.getAttribute("select") != null) {
					if (person.getAge_mem() < film_list
							.getDB(Integer.parseInt(session.getAttribute("select").toString()))
							.getAge_phase()) {
						out.println(
								"<script type='text/javascript'>alert('관람 연령 미달');history.go(-3);location.reload();</script>");

						return;
					}

      out.write('\r');
      out.write('\n');
      if (true) {
        _jspx_page_context.forward("seat.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

	} else {

      out.write('\r');
      out.write('\n');
      if (true) {
        _jspx_page_context.forward("film_list.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

	}

			}
		} else if (oper.equals("login")) {//로그인

			if (request.getParameter("name_mem").equals("admin")
					&& request.getParameter("password").equals("admin")) {

      out.write('\r');
      out.write('\n');
      if (true) {
        _jspx_page_context.forward("af_list.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

	}
			for (member tem : member_list.getDBList()) {
				if (request.getParameter("name_mem").equals(tem.getName_mem())
						&& request.getParameter("password").equals(tem.getPassword())) {
					session.setAttribute("person", tem);
					if (session.getAttribute("select") != null)
						if (person.getAge_mem() < film_list
								.getDB(Integer.parseInt(session.getAttribute("select").toString()))
								.getAge_phase()) {
							out.println(
									"<script type='text/javascript'>alert('관람 연령 미달');history.go(-2);location.reload();;</script>");

							return;
						}

      out.write('\r');
      out.write('\n');
      if (true) {
        _jspx_page_context.forward("seat.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

	return;
				}
			}
			out.println("<script type='text/javascript'>alert('아이디가 없거나 비밀번호 불일치 ');history.back();</script>");
			return;

		} else if (oper.equals("logout")) {//로그아웃
			session.removeAttribute("person");
			session.removeAttribute("select");
			response.sendRedirect("film_list.jsp");

		} else if (oper.equals("change")) {//회원정보 변경
			if (request.getParameter("password1").equals("") || request.getParameter("password2").equals("")
					|| request.getParameter("age_mem").equals("")) {
				out.println("<script type='text/javascript'>alert('모든 값을 입력하세요');history.back();</script>");
				return;
			}
			if (!request.getParameter("password1").equals(request.getParameter("password2"))) {
				out.println("<script type='text/javascript'>alert('비밀번호 불일치');history.back();</script>");
				return;
			}
			person.setPassword(request.getParameter("password1"));
			person.setAge_mem(Integer.parseInt(request.getParameter("age_mem")));
			member_list.updateDB(person);

      out.write('\r');
      out.write('\n');
      if (true) {
        _jspx_page_context.forward("film_list.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

	} else if (oper.equals("remove")) {//관리자 회원 삭제
			{

				int id = Integer.parseInt(request.getParameter("rm_Id"));

				for (resv temp : resv_list.getDBList()) {
					if (temp.getId_mem() == id) {
						seat_list.updatePerson(temp.getId_film(), temp.getSeat_no() + 1);
					}
				}
				resv_list.deletePerson(id);
				member_list.deleteDB(id);
				response.sendRedirect("am_list.jsp");
			}

		}
	} else if (action.equals("resv")) {
		String oper = request.getParameter("oper");
		if (oper.equals("add")) {//영화 예약

			chair = seat_list.getChair(Integer.parseInt(session.getAttribute("select").toString()));
			chair.setSeat(Integer.parseInt(request.getParameter("number")), true);
			seat_list.updateDB(chair);

			movie = film_list.getDB(chair.getId_film());
			book.setId_mem(person.getId_mem());
			book.setId_film(chair.getId_film());
			book.setFilm_name(movie.getFilm_name());
			book.setDate(movie.getDate());
			java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat("yyyy.MM");
			String today = formatter.format(new java.util.Date());
			book.setResv_date(today);
			book.setSeat_no(Integer.parseInt(request.getParameter("number")));
			resv_list.insertDB(book);

      out.write('\r');
      out.write('\n');
      if (true) {
        _jspx_page_context.forward("pay.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

	} else if (oper.equals("pay")) {//영화 결제
			book = resv_list.getDB(Integer.parseInt(request.getParameter("rid")));
			book.setStatus(true);
			resv_list.updateDB(book);

      out.write('\r');
      out.write('\n');
      if (true) {
        _jspx_page_context.forward("pay.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

	} else if (oper.equals("cancel")) {//예약,결제 취소
			book = resv_list.getDB(Integer.parseInt(request.getParameter("rid")));
			chair = seat_list.getChair(book.getId_film());
			chair.setSeat(book.getSeat_no(), false);
			seat_list.updateDB(chair);
			resv_list.deleteDB(book.getId_resv());

      out.write('\r');
      out.write('\n');
      if (true) {
        _jspx_page_context.forward("pay.jsp");
        return;
      }
      out.write('\r');
      out.write('\n');

	}
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
